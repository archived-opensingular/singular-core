/*
 * Copyright (C) 2016 Singular Studios (a.k.a Atom Tecnologia) - www.opensingular.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opensingular.form.exemplos.notificacaosimplificada.domain;

// Generated 16/03/2010 08:00:26

import org.opensingular.lib.support.persistence.enums.SimNao;
import org.opensingular.form.exemplos.notificacaosimplificada.domain.generic.VocabularioControlado;

import javax.persistence.*;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * FormaFarmaceuticaEspecif generated by Vinicius Uriel
 */
@XmlRootElement(name = "forma-farmaceutica-especifica", namespace = "http://www.anvisa.gov.br/reg-med/schema/domains")
@XmlType(name = "forma-farmaceutica-especifica", namespace = "http://www.anvisa.gov.br/reg-med/schema/domains")
@Entity
@Table(name = "TB_FORMA_FARM_ESPECIFICA", schema = "DBMEDICAMENTO")
@PrimaryKeyJoinColumn(name = "CO_FORMA_FARM_ESPEC", referencedColumnName = "CO_SEQ_VOCABULARIO_CONTROLADO")
@NamedQueries({
        @NamedQuery(name = "FormaFarmaceuticaEspecifica.findAll", query = "Select formaFarmaceuticaEspecifica From FormaFarmaceuticaEspecifica as formaFarmaceuticaEspecifica where formaFarmaceuticaEspecifica.ativa = 'S' ")})
public class FormaFarmaceuticaEspecifica extends VocabularioControlado {

    private static final long serialVersionUID = -780877665692038378L;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "CO_FORMA_FARMA_BASICA", nullable = false)
    private FormaFarmaceuticaBasica formaFarmaceuticaBasica;

    @Column(name = "DS_CONCEITO", nullable = false, length = 400)
    private String conceito;

    @Column(name = "SG_FORMA_FARM_ESPECIFICA", nullable = false, length = 30)
    private String sigla;

    public FormaFarmaceuticaEspecifica() {
    }

    public FormaFarmaceuticaEspecifica(Long id, FormaFarmaceuticaBasica formaFarmaceuticaBasica, String descricao, String conceito, SimNao ativa) {
        this.id = id;
        this.formaFarmaceuticaBasica = formaFarmaceuticaBasica;
        this.descricao = descricao;
        this.conceito = conceito;
        this.ativa = ativa;
    }

    public FormaFarmaceuticaBasica getFormaFarmaceuticaBasica() {
        if (this.formaFarmaceuticaBasica == null) {
            this.formaFarmaceuticaBasica = new FormaFarmaceuticaBasica();
        }
        return this.formaFarmaceuticaBasica;
    }

    public void setFormaFarmaceuticaBasica(FormaFarmaceuticaBasica formaFarmaceutica) {
        this.formaFarmaceuticaBasica = formaFarmaceutica;
    }

    public String getConceito() {
        return this.conceito;
    }

    public void setConceito(String conceito) {
        this.conceito = conceito;
    }

    public String getSigla() {
        return sigla;
    }

    public void setSigla(String sigla) {
        this.sigla = sigla;
    }

    @Override
    public int hashCode() {
        final int prime  = 31;
        int       result = 1;
        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null || !(obj instanceof FormaFarmaceuticaEspecifica)) {
            return false;
        }
        FormaFarmaceuticaEspecifica other = (FormaFarmaceuticaEspecifica) obj;
        if (this.getId() == null || other.getId() == null) {
            return this == obj;
        }
        if (this.getId().equals(other.getId())) {
            return true;
        }
        return false;
    }

}
